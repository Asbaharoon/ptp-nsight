<?xml version="1.0" encoding="UTF-8"?>
<project name="PTP ISV Doc Build" default="all" basedir=".">
	<target name="all">
		<antcall target="convertSchemaToHtml" />
		<antcall target="generateJavadoc" />
		<antcall target="build.index" />
	</target>


	<target name="build.index" description="Builds search index for the plug-in: org.eclipse.platform.doc.isv" if="eclipse.running">
		<help.buildHelpIndex manifest="${basedir}/plugin.xml" destination="${basedir}"/>
	</target>
	
	<property name="javadoc.link.location" value="${basedir}/javadoc.link.location"/>

	<target name="computeClasspath" unless="javadoc.classpath">
		<!-- Construct the javadoc classpath and store it in a property. -->
		<echo level="info" message="Computing classpath ..."/>
		
		<!-- Add platform dependencies required by your plug-in here.
			 Note that this pattern expects Eclipse to have 
			 been installed into the platform directory structure, as is
			 the case during the build. -->
		<patternset id="platform.classpath.pattern">
			<include name="**/org.eclipse.core*.jar"/>
			<include name="**/org.eclipse.core*/**/*.jar"/>
			<include name="**/org.eclipse.compare*.jar"/>
			<include name="**/org.eclipse.debug.core*.jar"/>
			<include name="**/org.eclipse.debug.ui*.jar"/>
			<include name="**/org.eclipse.help*.jar"/>
			<include name="**/org.eclipse.search*.jar"/>
        	<include name="**/org.eclipse.swt*.jar"/>
        	<include name="**/org.eclipse.swt*/**/*.jar"/>
        	<include name="**/org.eclipse.ui*.jar"/>
        	<include name="**/org.eclipse.ui*/**/*.jar"/>
        	<include name="**/org.eclipse.update*.jar"/>
        	<include name="**/org.eclipse.update*/**/*.jar"/>
        	<include name="**/org.eclipse.osgi*.jar"/>
        	<include name="**/org.eclipse.osgi*/**/*.jar"/>
        	<include name="**/org.eclipse.equinox*.jar"/>
        	<include name="**/org.eclipse.equinox*/**/*.jar"/>
        	<include name="**/org.eclipse.jface*.jar"/>
        	<include name="**/org.eclipse.jface*/**/*.jar"/>
          	<include name="**/org.eclipse.jsch*.jar"/>
        	<include name="**/org.eclipse.text*.jar"/>
        	<include name="**/org.eclipse.text*/**/*.jar"/>
        	<include name="**/org.eclipse.team*.jar"/>
        	<include name="**/org.eclipse.team*/**/*.jar"/>
        	<include name="**/org.junit*.jar"/>
        	<include name="**/org.junit*/**/*.jar"/>
			<include name="**/com.ibm.icu*.jar"/>
			<include name="**/com.jcraft.jsch*.jar"/>
		</patternset>
			
		<pathconvert property="javadoc.classpath">
			<path>				
				<fileset dir="${basedir}">
					<patternset refid="platform.classpath.pattern"/>
		    	</fileset>
			</path>
		</pathconvert>
		<echo level="info" message="Done computing classpath."/>
		<echo level="debug" message="Bootclasspath is: ${bootclasspath}"/>
		<echo level="debug" message="Classpath is: ${javadoc.classpath}"/>
	</target>

	<target name="extractLinks">
		<mkdir dir="${javadoc.link.location}"/>
		
		<patternset id="package.list">
			<include name="**/package-list"/>
		</patternset>
		
		<!-- We only need the package-list files out of these -->
		<unzip dest="${javadoc.link.location}/platform/">
			<patternset refid="package.list"/>
			<fileset dir="${safeBaseLocation}/plugins">
				<include name="org.eclipse.platform.doc.isv*.jar"/>
			</fileset>
		</unzip>
	</target>

	<target name="convertSchemaToHtml" if="eclipse.running">
		<property name="dest" value="reference/extension-points" />
		<record name="${basedir}/temp.convert.txt" action="start" />
		<pde.convertSchemaToHTML manifest="../../debug/org.eclipse.ptp.debug.core/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../../debug/org.eclipse.ptp.debug.sdm.core/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../../debug/org.eclipse.ptp.debug.ui/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../../rdt/org.eclipse.ptp.rdt.sync.core/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../../rdt/org.eclipse.ptp.rdt.sync.ui/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../org.eclipse.ptp.remote.core/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../org.eclipse.ptp.remote.ui/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../org.eclipse.ptp.services.core/plugin.xml" destination="${dest}" />
		<pde.convertSchemaToHTML manifest="../org.eclipse.ptp.services.ui/plugin.xml" destination="${dest}" />
		<record name="${basedir}/temp.convert.txt" action="stop" />
	</target>

	<target name="getJavadocPath">
		<available file="${java.home}/../bin/javadoc.exe" property="javadoc" value="${java.home}/../bin/javadoc.exe" />
		<available file="${java.home}/../bin/javadoc" property="javadoc" value="${java.home}/../bin/javadoc" />
	</target>

	<target name="generateJavadoc" depends="getJavadocPath,computeClasspath">
		<!-- replace "\n;" with platform-dependent list entry delimiter -->
		<property name="optionsFile" value="options.tmp.txt" />
		<copy file="options.txt" tofile="${optionsFile}" overwrite="true">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
		
		<condition property="argsListDelimiter" value=":">
			<os family="unix" />
		</condition>
		<condition property="argsListDelimiter" value=";">
			<os family="windows" />
		</condition>
		
		<replaceregexp file="${basedir}/${optionsFile}" flags="g" match="(\r\n?|\n);" replace="${argsListDelimiter}" />
		<replace file="${basedir}/${optionsFile}" token="@rt@" value="${bootclasspath}" />
		<replace file="${basedir}/${optionsFile}" token="@cp@" value="${javadoc.classpath}" />

		<!--scrub isv plugin directories of any preexisting api doc content-->
		<delete dir="reference/api"/>
		<mkdir dir="reference/api"/>

		<exec dir="." executable="${javadoc}" output="doc.bin.log">
			<arg line="@${basedir}/${optionsFile} -J-Xmx1000M" />
		</exec>
		
<!-- Debugging: Add a snapshot of the workspace contents: 
		<fileset dir="${basedir}/.." id="fileSet">
			<include name="*"/>
			<include name="*/*"/>
		</fileset>
		<dirset dir="${basedir}/.." id="dirSet">
			<include name="*"/>
			<include name="*/*"/>
		</dirset>
		<pathconvert property="fileList" refid="fileSet" dirsep="/" pathsep="&#xA;"/>
		<pathconvert property="dirList" refid="dirSet" dirsep="/" pathsep="&#xA;"/>
		<echo file="doc.bin.log" append="true">
Content of ${basedir}/..:
Files:
${fileList}
Directories:
${dirList}
</echo>
-->
	</target>
</project>



